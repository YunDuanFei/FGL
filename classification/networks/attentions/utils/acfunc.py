import torch
import torch.nn as nn


class Aconcfunc(nn.Module):
    r""" Using ACON activation (activate or not).
    # AconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is a learnable parameter
    """
    def __init__(self, in_channels):
        super().__init__()
        self.p1 = nn.Parameter(torch.randn(1, in_channels, 1, 1))
        self.p2 = nn.Parameter(torch.randn(1, in_channels, 1, 1))
        self.beta = nn.Parameter(torch.ones(1, in_channels, 1, 1))
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        return (self.p1 * x - self.p2 * x) * self.sigmoid(self.beta * (self.p1 * x - self.p2 * x)) + self.p2 * x

class MetaAconcfunc(nn.Module):
    r""" ACON activation (activate or not).
    # MetaAconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is generated by a small network
    # according to "Activate or Not: Learning Customized Activation" <https://arxiv.org/pdf/2009.04759.pdf>.
    """

    def __init__(self, in_channels, r=16):
        super().__init__()
        mid = max(r, in_channels // r)
        self.wbeta = nn.Sequential(
            nn.Conv2d(in_channels, mid, kernel_size=1, stride=1, bias=True),
            nn.BatchNorm2d(mid),
            nn.Conv2d(mid, in_channels, kernel_size=1, stride=1, bias=True),
            nn.BatchNorm2d(in_channels),
            nn.Sigmoid()
            )

        self.p1 = nn.Parameter(torch.randn(1, in_channels, 1, 1))
        self.p2 = nn.Parameter(torch.randn(1, in_channels, 1, 1))

    def forward(self, x):
        beta = self.wbeta(x.mean(dim=[2,3], keepdims=True))
        return (self.p1 * x - self.p2 * x) * torch.sigmoid(beta * (self.p1 * x - self.p2 * x)) + self.p2 * x
